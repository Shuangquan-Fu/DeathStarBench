// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	Request
	Result
	RegisterRequest
	RegisterResult
	ModifyRequest
	ModifyResult
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Request) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Result struct {
	Correct bool `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetCorrect() bool {
	if m != nil {
		return m.Correct
	}
	return false
}

type RegisterRequest struct {
	Username     string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password     string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Age          int32  `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Sex          string `protobuf:"bytes,4,opt,name=sex" json:"sex,omitempty"`
	Mail         string `protobuf:"bytes,5,opt,name=mail" json:"mail,omitempty"`
	Phone        string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
	Orderhistory string `protobuf:"bytes,7,opt,name=orderhistory" json:"orderhistory,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RegisterRequest) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *RegisterRequest) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *RegisterRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RegisterRequest) GetOrderhistory() string {
	if m != nil {
		return m.Orderhistory
	}
	return ""
}

type RegisterResult struct {
	Correct bool `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
}

func (m *RegisterResult) Reset()                    { *m = RegisterResult{} }
func (m *RegisterResult) String() string            { return proto.CompactTextString(m) }
func (*RegisterResult) ProtoMessage()               {}
func (*RegisterResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterResult) GetCorrect() bool {
	if m != nil {
		return m.Correct
	}
	return false
}

type ModifyRequest struct {
	Username     string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password     string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Age          int32  `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Sex          string `protobuf:"bytes,4,opt,name=sex" json:"sex,omitempty"`
	Mail         string `protobuf:"bytes,5,opt,name=mail" json:"mail,omitempty"`
	Phone        string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
	Orderhistory string `protobuf:"bytes,7,opt,name=orderhistory" json:"orderhistory,omitempty"`
}

func (m *ModifyRequest) Reset()                    { *m = ModifyRequest{} }
func (m *ModifyRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyRequest) ProtoMessage()               {}
func (*ModifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ModifyRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ModifyRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ModifyRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *ModifyRequest) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *ModifyRequest) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *ModifyRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ModifyRequest) GetOrderhistory() string {
	if m != nil {
		return m.Orderhistory
	}
	return ""
}

type ModifyResult struct {
	Correct bool `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
}

func (m *ModifyResult) Reset()                    { *m = ModifyResult{} }
func (m *ModifyResult) String() string            { return proto.CompactTextString(m) }
func (*ModifyResult) ProtoMessage()               {}
func (*ModifyResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ModifyResult) GetCorrect() bool {
	if m != nil {
		return m.Correct
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "user.Request")
	proto.RegisterType((*Result)(nil), "user.Result")
	proto.RegisterType((*RegisterRequest)(nil), "user.RegisterRequest")
	proto.RegisterType((*RegisterResult)(nil), "user.RegisterResult")
	proto.RegisterType((*ModifyRequest)(nil), "user.ModifyRequest")
	proto.RegisterType((*ModifyResult)(nil), "user.ModifyResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	// CheckUser returns whether the username and password are correct
	CheckUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResult, error)
	Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResult, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) CheckUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/user.User/CheckUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResult, error) {
	out := new(RegisterResult)
	err := grpc.Invoke(ctx, "/user.User/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResult, error) {
	out := new(ModifyResult)
	err := grpc.Invoke(ctx, "/user.User/Modify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/user.User/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	// CheckUser returns whether the username and password are correct
	CheckUser(context.Context, *Request) (*Result, error)
	Register(context.Context, *RegisterRequest) (*RegisterResult, error)
	Modify(context.Context, *ModifyRequest) (*ModifyResult, error)
	Delete(context.Context, *Request) (*Result, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CheckUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Modify(ctx, req.(*ModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUser",
			Handler:    _User_CheckUser_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _User_Modify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _User_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x53, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0x26, 0x76, 0xbb, 0x6d, 0x87, 0x56, 0x65, 0xac, 0x10, 0xf6, 0x54, 0x02, 0xc2, 0xe2, 0xa1,
	0xa0, 0x1e, 0x3c, 0x8b, 0x5e, 0xbd, 0x04, 0x7c, 0x80, 0xb5, 0x1d, 0xdb, 0xc5, 0xb6, 0x59, 0x93,
	0x2c, 0xda, 0x47, 0x13, 0x8f, 0xbe, 0x98, 0x64, 0xd6, 0x28, 0xeb, 0xa1, 0x1e, 0x3c, 0x79, 0xfb,
	0x7e, 0x36, 0xd9, 0xef, 0x1b, 0x26, 0x00, 0xb5, 0x23, 0x3b, 0xad, 0xac, 0xf1, 0x06, 0x93, 0x80,
	0xd5, 0x15, 0xf4, 0x34, 0x3d, 0xd5, 0xe4, 0x3c, 0x66, 0xd0, 0x0f, 0xd2, 0xa6, 0x58, 0x93, 0x14,
	0x13, 0x91, 0x0f, 0xf4, 0x17, 0x0f, 0x5e, 0x55, 0x38, 0xf7, 0x6c, 0xec, 0x5c, 0xee, 0x35, 0x5e,
	0xe4, 0x4a, 0x41, 0xaa, 0xc9, 0xd5, 0x2b, 0x8f, 0x12, 0x7a, 0x33, 0x63, 0x2d, 0xcd, 0x3c, 0x5f,
	0xd0, 0xd7, 0x91, 0xaa, 0x37, 0x01, 0x07, 0x9a, 0x16, 0xa5, 0xf3, 0x64, 0xff, 0xf8, 0x3f, 0x3c,
	0x84, 0x4e, 0xb1, 0x20, 0xd9, 0x99, 0x88, 0xbc, 0xab, 0x03, 0x0c, 0x8a, 0xa3, 0x17, 0x99, 0xf0,
	0x87, 0x01, 0x22, 0x42, 0xb2, 0x2e, 0xca, 0x95, 0xec, 0xb2, 0xc4, 0x18, 0xc7, 0xd0, 0xad, 0x96,
	0x66, 0x43, 0x32, 0x65, 0xb1, 0x21, 0xa8, 0x60, 0x68, 0xec, 0x9c, 0xec, 0xb2, 0x74, 0xde, 0xd8,
	0xad, 0xec, 0xb1, 0xd9, 0xd2, 0xd4, 0x29, 0xec, 0x7f, 0x87, 0xff, 0xa5, 0xe9, 0xab, 0x80, 0xd1,
	0xad, 0x99, 0x97, 0x0f, 0xdb, 0xff, 0xd7, 0x33, 0x87, 0x61, 0x8c, 0xbe, 0xbb, 0xe5, 0xf9, 0xbb,
	0x80, 0xe4, 0xce, 0x91, 0xc5, 0x1c, 0x06, 0xd7, 0x4b, 0x9a, 0x3d, 0x32, 0x19, 0x4d, 0x79, 0xbf,
	0x3e, 0x8b, 0x67, 0xc3, 0x48, 0xf9, 0xb2, 0x4b, 0xe8, 0xc7, 0x21, 0xe2, 0x71, 0x74, 0x5a, 0x1b,
	0x91, 0x8d, 0x7f, 0xca, 0x7c, 0xf0, 0x0c, 0xd2, 0x26, 0x15, 0x1e, 0x35, 0x7e, 0x6b, 0xbc, 0x19,
	0xb6, 0x45, 0x3e, 0x72, 0x02, 0xe9, 0x0d, 0xad, 0xc8, 0xd3, 0xce, 0x48, 0xf7, 0x29, 0xbf, 0x84,
	0x8b, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xa6, 0x34, 0x83, 0x17, 0x03, 0x00, 0x00,
}
